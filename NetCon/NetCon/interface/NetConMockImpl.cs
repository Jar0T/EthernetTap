using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace NetCon.inter
{
    class NetConMockImpl : INetCon
    {
        private FrameListener frameListener;
        private Boolean shouldWork;
        private Boolean captureState;

        private Byte[] mockData = {
                            0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xd5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01,
                            0x05, 0x1b, 0x9f, 0x96, 0x08, 0x00, 0x45, 0x00, 0x00, 0xd0, 0x4a, 0x0d, 0x00, 0x00, 0x80, 0x11,
                            0x78, 0x75, 0xa9, 0xfe, 0x23, 0x9e, 0xa9, 0xfe, 0xff, 0xff, 0x00, 0x8a, 0x00, 0x8a, 0x00, 0xbc,
                            0x22, 0xf4, 0x11, 0x0e, 0xe7, 0xb1, 0xa9, 0xfe, 0x23, 0x9e, 0x00, 0x8a, 0x00, 0xa6, 0x00, 0x00,
                            0x20, 0x45, 0x43, 0x45, 0x46, 0x45, 0x44, 0x45, 0x4c, 0x46, 0x50, 0x45, 0x44, 0x46, 0x49, 0x46, 
                            0x50, 0x45, 0x48, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x41, 
                            0x41, 0x00, 0x20, 0x46, 0x44, 0x46, 0x45, 0x45, 0x46, 0x46, 0x43, 0x45, 0x50, 0x46, 0x48, 0x45, 
                            0x4f, 0x45, 0x4a, 0x45, 0x4c, 0x45, 0x4a, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 
                            0x41, 0x42, 0x4e, 0x00, 0xff, 0x53, 0x4d, 0x42, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                            0x00, 0xe8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x56, 0x00, 0x03, 
                            0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x1d, 0x00, 0x5c, 0x4d, 0x41, 0x49, 0x4c, 0x53, 0x4c, 
                            0x4f, 0x54, 0x5c, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x00, 0x02, 0x00, 0x42, 0x45, 0x43, 0x4b, 
                            0x5f, 0x43, 0x58, 0x5f, 0x47, 0x00, 0x41, 0x62, 0x8f, 0xe0};

        private IntPtr mockDataPtr;
        public void sendAndReceiveMdio() { }
        public void sendFilter() { }
        public void sendRequest(RequestCode code, int port, bool value) { }
        public void sendSettings(string[] settings) { }

        public void setCaptureState(bool state) { this.captureState = state; }
        public void setOnFrameListener(FrameListener f)
        {
            frameListener = f;
        }

        public void startCapture()
        {
            shouldWork = true;
            while (shouldWork)
            {
                mockDataPtr = Marshal.AllocHGlobal(mockData.Length);
                Marshal.Copy(mockData, 0, mockDataPtr, mockData.Length);
                if (captureState)
                {
                    frameListener(mockDataPtr, mockData.Length);
                }
                Thread.Sleep(1000);
            }
        }

        public void stopCapture()
        {
            shouldWork = false;
            Marshal.FreeHGlobal(mockDataPtr);
        }
    }
}
